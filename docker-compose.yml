version: '3.8'
services:
  log-consumer:
    build:
      context: . # This sets the context to the root directory
      dockerfile: log-consumer/Dockerfile
    depends_on:
      - kafka
      - mongodb
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/logs
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8081:8081"

  log-listener:
    build:
      context: . # This sets the context to the root directory
      dockerfile: log-listener/Dockerfile
    depends_on:
      - kafka
      - mongodb
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/logs
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8082:8082"
    volumes:
      - C:\Users\Asus\IdeaProjects\log-project\logs:/app/logs

  log-creator:
    build:
      context: . # This sets the context to the root directory
      dockerfile: log-creator/Dockerfile
    depends_on:
      - kafka
      - mongodb
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/logs
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8083:8083"
    volumes:
      - C:\Users\Asus\IdeaProjects\log-project\logs:/app/logs


  kafka:
    image: bitnami/kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - zookeeper

  log-dashboard-app:
    build:
      context: . # Assuming the Dockerfile is in the root directory
      dockerfile: log-dashboard-app/Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./log-dashboard-app:/app # Mount the application code to the container
      - /app/node_modules # Use a volume for node_modules to avoid overwriting the container's node_modules with the host's
    environment:
      - CHOKIDAR_USEPOLLING=true # This helps with hot reloading in some environments

  mongo-express:
    image: mongo-express
    depends_on:
      - mongodb
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: ""
      ME_CONFIG_MONGODB_ADMINPASSWORD: ""
    ports:
      - "8084:8084"

volumes:
  mongodb_data:
